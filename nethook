#! /usr/bin/env perl

# http://search.cpan.org/~mschilli/App-Daemon-0.11/Daemon.pm
# http://search.cpan.org/~lds/IO-Interface-1.05/Interface.pm

# would be nice to support debian variables as well
# http://www.debian.org/doc/manuals/debian-reference/ch05.en.html#_scripting_with_the_ifupdown_system

use strict;
use warnings;

use App::Daemon qw(daemonize);
use Log::Log4perl qw(:easy);
use IO::Interface::Simple;
use YAML qw(DumpFile);

$App::Daemon::logfile = '/var/log/nethook.log';
$App::Daemon::pidfile = '/var/run/nethook.pid';
$App::Daemon::as_user = 'root';

$SIG{'IO'}   = 'wake_daemon';
$SIG{'TERM'} = 'stop_daemon';
$SIG{'INT'}  = 'stop_daemon';

my $state_dir = '/var/lib/nethook';
my $state     = "$state_dir/state.yml";
my $conf_dir  = '/etc/nethook';

# ifup.d/ and ifdown.d/ for scripts that run for every interface
# ifup-$DEVICE and ifdown-$DEVICE for interface specific scripts

daemonize();

my $logger = get_logger();

start_daemon();

sub start_daemon {
    $logger->debug("Hello");

    unless ( -d $state_dir ) {
        mkdir $state_dir;
    }
    unless ( -d $conf_dir ) {
        mkdir $conf_dir;
    }
    unless ( -d "$conf_dir/ifup.d" ) {
        mkdir "$conf_dir/ifup.d";
    }
    unless ( -d "$conf_dir/ifdown.d" ) {
        mkdir "$conf_dir/ifdown.d";
    }

    my %current_interfaces = status_by_interface();
    YAML::DumpFile( $state, %current_interfaces )
      or die "Unable to save state\n";

    system('/sbin/netreport') == 0
      or die 'Unable to request notification of network interface changes';

    # no more work to do until signal received
    while (1) {
        $logger->debug("Zzz");
        sleep(86400);
    }

}

sub wake_daemon {
    $logger->debug("Yawn");

    my %previous_interfaces = YAML::LoadFile($state);
    my %current_interfaces  = status_by_interface();
    YAML::DumpFile( $state, %current_interfaces )
      or die "Unable to save state\n";

    for my $i ( keys %previous_interfaces ) {
        my $was_running = $previous_interfaces{$i};
        my $is_running  = $current_interfaces{$i};
        if ( $was_running == $is_running ) {
            next;
        }
        else {
            if ($was_running) {
                run_scripts( $i, 'down' );
            }
            else {
                run_scripts( $i, 'up' );
            }
        }
    }

    return;
}

sub run_scripts {
    my $i     = shift;
    my $state = shift;
    $logger->info("$i went $state");

    my $ifcfg = "/etc/sysconfig/network-scripts/ifcfg-$i";
    if ( -r $ifcfg ) {
        my @variables_set = set_environment($ifcfg);
        opendir my $dh, "$conf_dir/if$state.d";
        my @scripts = ();
        while ( my $f = readdir $dh ) {

            # skip hidden files
            next if $f =~ /^\./;
            push( @scripts, "$conf_dir/if$state.d/$f" );
        }
        closedir $dh;
        push( @scripts, "$conf_dir/if$state-$i" );
        for my $s (@scripts) {
            if ( -f $s and -x $s ) {
                my $return = system($s);
                if ( $return == 0 ) {
                    $logger->info("$s ran successfully");
                }
                else {
                    $logger->info("$s exited with error $return");
                }
            }
        }
        unset_environment(@variables_set);
    }

    return;
}

# SIGKILL handler
sub stop_daemon {
    $logger->debug("Goodbye");
    system('/sbin/netreport -r');
    unlink($state);
    unlink($App::Daemon::pidfile);
    exit(0);
}

sub status_by_interface {
    my @interfaces = IO::Interface::Simple->interfaces;
    my %results;
    for my $i (@interfaces) {
        if ( $i->is_running ) {
            $results{$i} = 1;
        }
        else {
            $results{$i} = 0;
        }
    }
    return %results;
}

sub set_environment {
    my $source = shift;
    my @names  = ();

    open my $fh, '<', $source or die "Unable to read interface configuration\n";

    while ( my $line = <$fh> ) {

        # skip comments
        if ( $line =~ /^#/ ) {
            next;
        }

        # skip lines that aren't variable assignment
        unless ( $line =~ /=/ ) {
            next;
        }

        my ( $name, $value ) = split( /=/, $line );
        chomp($name);
        chomp($value);

        if ( exists $ENV{$name} ) {
            $logger->info(
"Not clobbering existing environment variable $name when reading $source"
            );
        }
        else {
            $ENV{$name} = $value;
            push( @names, $name );
        }
    }

    close $fh;

    return @names;
}

sub unset_environment {
    my @names = @_;
    for my $n (@names) {
        delete $ENV{$n};
    }

    return;
}
